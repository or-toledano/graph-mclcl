/home/orto/.conda/envs/bio/bin/python /home/orto/PycharmProjects/graph-mclcl/GraphCL/semisupervised_TU/finetuning/main_cl.py --epochs 100 --aug1 dropN --aug2 mcl
[INFO] running standard benchmarks..
-----
Total 1 experiments in this run:
1/1 - NCI1 - deg+odeg100 - ResGCN
Here we go..
-----
1/1 - NCI1 - deg+odeg100 - ResGCN
/home/orto/.conda/envs/bio/lib/python3.8/site-packages/torch_geometric/data/in_memory_dataset.py:157: UserWarning: It is not recommended to directly access the internal storage format `data` of an 'InMemoryDataset'. If you are absolutely certain what you are doing, access the internal storage via `InMemoryDataset._data` instead to suppress this warning. Alternatively, you can access stacked individual attributes of every graph via `dataset.{attr_name}`.
  warnings.warn(msg)
/home/orto/.conda/envs/bio/lib/python3.8/site-packages/torch_geometric/data/in_memory_dataset.py:157: UserWarning: It is not recommended to directly access the internal storage format `data` of an 'InMemoryDataset'. If you are absolutely certain what you are doing, access the internal storage via `InMemoryDataset._data` instead to suppress this warning. Alternatively, you can access stacked individual attributes of every graph via `dataset.{attr_name}`.
  warnings.warn(msg)
/home/orto/.conda/envs/bio/lib/python3.8/site-packages/torch_geometric/data/in_memory_dataset.py:157: UserWarning: It is not recommended to directly access the internal storage format `data` of an 'InMemoryDataset'. If you are absolutely certain what you are doing, access the internal storage via `InMemoryDataset._data` instead to suppress this warning. Alternatively, you can access stacked individual attributes of every graph via `dataset.{attr_name}`.
  warnings.warn(msg)
/home/orto/.conda/envs/bio/lib/python3.8/site-packages/torch_geometric/data/in_memory_dataset.py:157: UserWarning: It is not recommended to directly access the internal storage format `data` of an 'InMemoryDataset'. If you are absolutely certain what you are doing, access the internal storage via `InMemoryDataset._data` instead to suppress this warning. Alternatively, you can access stacked individual attributes of every graph via `dataset.{attr_name}`.
  warnings.warn(msg)
/home/orto/.conda/envs/bio/lib/python3.8/site-packages/torch_geometric/data/in_memory_dataset.py:157: UserWarning: It is not recommended to directly access the internal storage format `data` of an 'InMemoryDataset'. If you are absolutely certain what you are doing, access the internal storage via `InMemoryDataset._data` instead to suppress this warning. Alternatively, you can access stacked individual attributes of every graph via `dataset.{attr_name}`.
  warnings.warn(msg)
/home/orto/.conda/envs/bio/lib/python3.8/site-packages/torch_geometric/data/in_memory_dataset.py:157: UserWarning: It is not recommended to directly access the internal storage format `data` of an 'InMemoryDataset'. If you are absolutely certain what you are doing, access the internal storage via `InMemoryDataset._data` instead to suppress this warning. Alternatively, you can access stacked individual attributes of every graph via `dataset.{attr_name}`.
  warnings.warn(msg)
/home/orto/.conda/envs/bio/lib/python3.8/site-packages/torch_geometric/data/in_memory_dataset.py:157: UserWarning: It is not recommended to directly access the internal storage format `data` of an 'InMemoryDataset'. If you are absolutely certain what you are doing, access the internal storage via `InMemoryDataset._data` instead to suppress this warning. Alternatively, you can access stacked individual attributes of every graph via `dataset.{attr_name}`.
  warnings.warn(msg)
/home/orto/.conda/envs/bio/lib/python3.8/site-packages/torch_geometric/data/in_memory_dataset.py:157: UserWarning: It is not recommended to directly access the internal storage format `data` of an 'InMemoryDataset'. If you are absolutely certain what you are doing, access the internal storage via `InMemoryDataset._data` instead to suppress this warning. Alternatively, you can access stacked individual attributes of every graph via `dataset.{attr_name}`.
  warnings.warn(msg)
/home/orto/.conda/envs/bio/lib/python3.8/site-packages/torch_geometric/data/in_memory_dataset.py:157: UserWarning: It is not recommended to directly access the internal storage format `data` of an 'InMemoryDataset'. If you are absolutely certain what you are doing, access the internal storage via `InMemoryDataset._data` instead to suppress this warning. Alternatively, you can access stacked individual attributes of every graph via `dataset.{attr_name}`.
  warnings.warn(msg)
/home/orto/.conda/envs/bio/lib/python3.8/site-packages/torch_geometric/data/in_memory_dataset.py:157: UserWarning: It is not recommended to directly access the internal storage format `data` of an 'InMemoryDataset'. If you are absolutely certain what you are doing, access the internal storage via `InMemoryDataset._data` instead to suppress this warning. Alternatively, you can access stacked individual attributes of every graph via `dataset.{attr_name}`.
  warnings.warn(msg)
/home/orto/.conda/envs/bio/lib/python3.8/site-packages/torch_geometric/data/in_memory_dataset.py:157: UserWarning: It is not recommended to directly access the internal storage format `data` of an 'InMemoryDataset'. If you are absolutely certain what you are doing, access the internal storage via `InMemoryDataset._data` instead to suppress this warning. Alternatively, you can access stacked individual attributes of every graph via `dataset.{attr_name}`.
  warnings.warn(msg)
/home/orto/.conda/envs/bio/lib/python3.8/site-packages/torch_geometric/deprecation.py:22: UserWarning: 'data.DataLoader' is deprecated, use 'loader.DataLoader' instead
  warnings.warn(out)
bn_feat.weight torch.Size([139])
bn_feat.bias torch.Size([139])
conv_feat.weight torch.Size([139, 128])
conv_feat.bias torch.Size([128])
bns_conv.0.weight torch.Size([128])
bns_conv.0.bias torch.Size([128])
bns_conv.1.weight torch.Size([128])
bns_conv.1.bias torch.Size([128])
bns_conv.2.weight torch.Size([128])
bns_conv.2.bias torch.Size([128])
convs.0.weight torch.Size([128, 128])
convs.0.bias torch.Size([128])
convs.1.weight torch.Size([128, 128])
convs.1.bias torch.Size([128])
convs.2.weight torch.Size([128, 128])
convs.2.bias torch.Size([128])
bn_hidden.weight torch.Size([128])
bn_hidden.bias torch.Size([128])
bns_fc.0.weight torch.Size([128])
bns_fc.0.bias torch.Size([128])
lins.0.weight torch.Size([128, 128])
lins.0.bias torch.Size([128])
lin_class.weight torch.Size([2, 128])
lin_class.bias torch.Size([2])
proj_head.0.weight torch.Size([128, 128])
proj_head.0.bias torch.Size([128])
proj_head.2.weight torch.Size([128, 128])
proj_head.2.bias torch.Size([128])
00/001: Train Acc: 0.486, Test Accuracy: 0.472
00/010: Train Acc: 0.946, Test Accuracy: 0.630
00/020: Train Acc: 1.000, Test Accuracy: 0.637
00/030: Train Acc: 1.000, Test Accuracy: 0.618
00/040: Train Acc: 1.000, Test Accuracy: 0.630
00/050: Train Acc: 1.000, Test Accuracy: 0.620
00/060: Train Acc: 1.000, Test Accuracy: 0.628
00/070: Train Acc: 1.000, Test Accuracy: 0.623
00/080: Train Acc: 1.000, Test Accuracy: 0.623
00/090: Train Acc: 1.000, Test Accuracy: 0.623
00/100: Train Acc: 1.000, Test Accuracy: 0.623
01/001: Train Acc: 0.405, Test Accuracy: 0.491
01/010: Train Acc: 0.892, Test Accuracy: 0.686
01/020: Train Acc: 1.000, Test Accuracy: 0.676
01/030: Train Acc: 1.000, Test Accuracy: 0.674
01/040: Train Acc: 1.000, Test Accuracy: 0.686
01/050: Train Acc: 1.000, Test Accuracy: 0.691
01/060: Train Acc: 1.000, Test Accuracy: 0.676
01/070: Train Acc: 1.000, Test Accuracy: 0.676
01/080: Train Acc: 1.000, Test Accuracy: 0.684
01/090: Train Acc: 1.000, Test Accuracy: 0.684
01/100: Train Acc: 1.000, Test Accuracy: 0.681
02/001: Train Acc: 0.541, Test Accuracy: 0.453
02/010: Train Acc: 0.865, Test Accuracy: 0.487
02/020: Train Acc: 0.973, Test Accuracy: 0.491
02/030: Train Acc: 1.000, Test Accuracy: 0.509
02/040: Train Acc: 1.000, Test Accuracy: 0.516
02/050: Train Acc: 1.000, Test Accuracy: 0.513
02/060: Train Acc: 1.000, Test Accuracy: 0.523
02/070: Train Acc: 1.000, Test Accuracy: 0.516
02/080: Train Acc: 1.000, Test Accuracy: 0.521
02/090: Train Acc: 1.000, Test Accuracy: 0.528
02/100: Train Acc: 1.000, Test Accuracy: 0.526
03/001: Train Acc: 0.459, Test Accuracy: 0.401
03/010: Train Acc: 0.973, Test Accuracy: 0.530
03/020: Train Acc: 1.000, Test Accuracy: 0.543
03/030: Train Acc: 1.000, Test Accuracy: 0.599
03/040: Train Acc: 1.000, Test Accuracy: 0.577
03/050: Train Acc: 1.000, Test Accuracy: 0.582
03/060: Train Acc: 1.000, Test Accuracy: 0.579
03/070: Train Acc: 1.000, Test Accuracy: 0.572
03/080: Train Acc: 1.000, Test Accuracy: 0.569
03/090: Train Acc: 1.000, Test Accuracy: 0.567
03/100: Train Acc: 1.000, Test Accuracy: 0.569
04/001: Train Acc: 0.405, Test Accuracy: 0.489
04/010: Train Acc: 0.919, Test Accuracy: 0.594
04/020: Train Acc: 0.946, Test Accuracy: 0.599
04/030: Train Acc: 1.000, Test Accuracy: 0.616
04/040: Train Acc: 1.000, Test Accuracy: 0.599
04/050: Train Acc: 1.000, Test Accuracy: 0.611
04/060: Train Acc: 1.000, Test Accuracy: 0.606
04/070: Train Acc: 1.000, Test Accuracy: 0.611
04/080: Train Acc: 1.000, Test Accuracy: 0.608
04/090: Train Acc: 1.000, Test Accuracy: 0.601
04/100: Train Acc: 1.000, Test Accuracy: 0.601
05/001: Train Acc: 0.649, Test Accuracy: 0.453
05/010: Train Acc: 0.919, Test Accuracy: 0.545
05/020: Train Acc: 1.000, Test Accuracy: 0.538
05/030: Train Acc: 1.000, Test Accuracy: 0.560
05/040: Train Acc: 1.000, Test Accuracy: 0.579
05/050: Train Acc: 1.000, Test Accuracy: 0.577
05/060: Train Acc: 1.000, Test Accuracy: 0.574
05/070: Train Acc: 1.000, Test Accuracy: 0.569
05/080: Train Acc: 1.000, Test Accuracy: 0.569
05/090: Train Acc: 1.000, Test Accuracy: 0.572
05/100: Train Acc: 1.000, Test Accuracy: 0.572
06/001: Train Acc: 0.514, Test Accuracy: 0.465
06/010: Train Acc: 0.892, Test Accuracy: 0.569
06/020: Train Acc: 0.973, Test Accuracy: 0.586
06/030: Train Acc: 1.000, Test Accuracy: 0.582
06/040: Train Acc: 1.000, Test Accuracy: 0.582
06/050: Train Acc: 1.000, Test Accuracy: 0.586
06/060: Train Acc: 1.000, Test Accuracy: 0.586
06/070: Train Acc: 1.000, Test Accuracy: 0.577
06/080: Train Acc: 1.000, Test Accuracy: 0.574
06/090: Train Acc: 1.000, Test Accuracy: 0.569
06/100: Train Acc: 1.000, Test Accuracy: 0.567
07/001: Train Acc: 0.459, Test Accuracy: 0.494
07/010: Train Acc: 0.892, Test Accuracy: 0.662
07/020: Train Acc: 0.973, Test Accuracy: 0.616
07/030: Train Acc: 1.000, Test Accuracy: 0.579
07/040: Train Acc: 1.000, Test Accuracy: 0.564
07/050: Train Acc: 1.000, Test Accuracy: 0.599
07/060: Train Acc: 1.000, Test Accuracy: 0.591
07/070: Train Acc: 1.000, Test Accuracy: 0.591
07/080: Train Acc: 1.000, Test Accuracy: 0.596
07/090: Train Acc: 1.000, Test Accuracy: 0.601
07/100: Train Acc: 1.000, Test Accuracy: 0.603
08/001: Train Acc: 0.297, Test Accuracy: 0.506
08/010: Train Acc: 0.838, Test Accuracy: 0.647
08/020: Train Acc: 0.973, Test Accuracy: 0.640
08/030: Train Acc: 1.000, Test Accuracy: 0.620
08/040: Train Acc: 1.000, Test Accuracy: 0.630
08/050: Train Acc: 1.000, Test Accuracy: 0.625
08/060: Train Acc: 1.000, Test Accuracy: 0.623
08/070: Train Acc: 1.000, Test Accuracy: 0.625
08/080: Train Acc: 1.000, Test Accuracy: 0.623
08/090: Train Acc: 1.000, Test Accuracy: 0.618
08/100: Train Acc: 1.000, Test Accuracy: 0.616
09/001: Train Acc: 0.432, Test Accuracy: 0.474
09/010: Train Acc: 0.946, Test Accuracy: 0.613
09/020: Train Acc: 1.000, Test Accuracy: 0.569
09/030: Train Acc: 1.000, Test Accuracy: 0.533
09/040: Train Acc: 1.000, Test Accuracy: 0.550
09/050: Train Acc: 1.000, Test Accuracy: 0.577
09/060: Train Acc: 1.000, Test Accuracy: 0.582
09/070: Train Acc: 1.000, Test Accuracy: 0.584
09/080: Train Acc: 1.000, Test Accuracy: 0.586
09/090: Train Acc: 1.000, Test Accuracy: 0.586
09/100: Train Acc: 1.000, Test Accuracy: 0.594
Train Acc: 1.0000, Test Acc: 0.599 ± 0.040, Duration: 7.010
mid-result: data=NCI1, model=ResGCN, feat=deg+odeg100, eval=test_max, train_acc=100.00, test_acc=59.88 ± 3.98, sec=7.01
-----
fin-result: data=NCI1, model=ResGCN, feat=deg+odeg100, eval=test_max, train_acc=100.00, test_acc=59.88 ± 3.98, sec=7.01

Process finished with exit code 0
